{"version":3,"file":"static/js/26.6aad382e.chunk.js","mappings":"yPACA,EAA0B,8BAA1B,EAAkE,8BAAlE,EAAgH,oCAAhH,EAA+J,+BAA/J,EAA4M,kC,UCK/LA,EAAe,WAC1B,OAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,MAAmCA,EAAEC,cAAvBC,EAAd,EAAQC,KAAiBC,EAAzB,EAAyBA,MAEzB,OAAQF,GACN,IAAK,OACHV,EAAYY,GACZ,MACF,IAAK,QACHV,EAASU,GACT,MACF,IAAK,WACHR,EAAYQ,GACZ,MACF,QAIE,YAHAC,QAAQC,IAAR,6BACwBJ,EADxB,4BACqDE,EADrD,yBAKL,EAgBKG,EAAQ,WACZf,EAAY,IACZE,EAAS,IACTE,EAAY,GACb,EAEKY,GAAkBC,EAAAA,EAAAA,UAClBC,GAAeD,EAAAA,EAAAA,UACfE,GAAkBF,EAAAA,EAAAA,UAExB,OACE,iBAAKG,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,UACE,kDAGF,kBACED,UAAWC,EACXC,aAAa,MACbC,SAjCe,SAAAf,GACnBA,EAAEgB,iBAEFnB,GACEoB,EAAAA,EAAAA,IAAS,CACPd,KAAMZ,EACNE,MAAAA,EACAE,SAAAA,KAIJY,GACD,EAkBG,WAKE,mBAAOW,QAASV,EAAhB,kBAEE,kBACEW,KAAK,OACLhB,KAAK,OACLiB,GAAIZ,EACJa,SAAUtB,EACVK,MAAOb,QAIX,mBAAO2B,QAASR,EAAhB,mBAEE,kBACES,KAAK,QACLhB,KAAK,QACLiB,GAAIV,EACJY,UAAQ,EACRD,SAAUtB,EACVK,MAAOX,QAIX,mBAAOyB,QAASP,EAAhB,sBAEE,kBACEQ,KAAK,WACLhB,KAAK,WACLiB,GAAIT,EACJW,UAAQ,EACRD,SAAUtB,EACVK,MAAOT,QAIX,iBAAKiB,UAAWC,EAAhB,WACE,mBAAQM,KAAK,SAAb,uBACA,mBACEA,KAAK,SACLI,QAAShB,EACTiB,UAAWjC,IAAaE,IAAUE,EAClCiB,UACGrB,GAAaE,GAAUE,OAA0B8B,EAAfZ,EALvC,2BAcT,ECxGD,EAbiB,WACf,OACE,4BACE,SAAC,KAAD,WACE,SAAC,KAAD,WACE,iDAGJ,SAACxB,EAAD,MAGL,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"RegisterForm_wrapper__cfB-9\",\"heading\":\"RegisterForm_heading__4c5YV\",\"register-form\":\"RegisterForm_register-form__NP-TN\",\"disabled\":\"RegisterForm_disabled__P4adn\",\"buttons-bar\":\"RegisterForm_buttons-bar__xXEZi\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { register } from 'redux/auth/operations';\nimport css from './RegisterForm.module.css';\n\nexport const RegisterForm = () => {\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name: inputName, value } = e.currentTarget;\n\n    switch (inputName) {\n      case 'name':\n        setUsername(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        console.log(\n          `Error: there isn't ${inputName} input for value ${value}. Check form markup.`\n        );\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(\n      register({\n        name: username,\n        email,\n        password,\n      })\n    );\n\n    reset();\n  };\n\n  const reset = () => {\n    setUsername('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const usernameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  return (\n    <div className={css.wrapper}>\n      <div className={css.heading}>\n        <h1>Create new account</h1>\n      </div>\n\n      <form\n        className={css['register-form']}\n        autoComplete=\"off\"\n        onSubmit={handleSubmit}\n      >\n        <label htmlFor={usernameInputId}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            id={usernameInputId}\n            onChange={handleChange}\n            value={username}\n          />\n        </label>\n\n        <label htmlFor={emailInputId}>\n          Email\n          <input\n            type=\"email\"\n            name=\"email\"\n            id={emailInputId}\n            required\n            onChange={handleChange}\n            value={email}\n          />\n        </label>\n\n        <label htmlFor={passwordInputId}>\n          Password\n          <input\n            type=\"password\"\n            name=\"password\"\n            id={passwordInputId}\n            required\n            onChange={handleChange}\n            value={password}\n          />\n        </label>\n\n        <div className={css['buttons-bar']}>\n          <button type=\"submit\">Register</button>\n          <button\n            type=\"button\"\n            onClick={reset}\n            disabled={!username && !email && !password}\n            className={\n              !username && !email && !password ? css.disabled : undefined\n            }\n          >\n            Clear\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <div>\n      <HelmetProvider>\n        <Helmet>\n          <title>Registration</title>\n        </Helmet>\n      </HelmetProvider>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default Register;\n"],"names":["RegisterForm","useState","username","setUsername","email","setEmail","password","setPassword","dispatch","useDispatch","handleChange","e","currentTarget","inputName","name","value","console","log","reset","usernameInputId","nanoid","emailInputId","passwordInputId","className","css","autoComplete","onSubmit","preventDefault","register","htmlFor","type","id","onChange","required","onClick","disabled","undefined"],"sourceRoot":""}